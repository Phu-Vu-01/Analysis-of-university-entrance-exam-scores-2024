# -*- coding: utf-8 -*-
"""Phân tích điểm thi đại học 2024

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ibK88tYRluE8L4tpJ6TWHEi_k08CPqnP

# 1.   Load Data
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_columns', None)

from google.colab import drive
drive.mount('/content/drive')

df_20_21 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiemDH/diem_thi_2020_2021.csv')
df_22 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiemDH/diem_thi_thpt_2022.csv')
df_23 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiemDH/diem_thi_thpt_2023.csv')
df_24 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiemDH/diem_thi_thpt_2024.csv')

"""# 2. Data cleaning

## Transform tables
"""

df_20_21.sort_values(by='SBD', ascending=True).head(2)

df_22.sort_values(by='sbd', ascending=True).head(2)

df_23.sort_values(by='sbd', ascending=True).head(2)

df_24.sort_values(by='sbd', ascending=True).head(2)

df_20_21['ma_ngoai_ngu'] = 'none'
df_20_21 = df_20_21[['SBD', 'Toán','Văn', 'Ngoại Ngữ', 'Lý', 'Hoá', 'Sinh', 'Lịch Sử', 'Địa Lý', 'GDCD', 'ma_ngoai_ngu', 'Year']]
df_20_21.columns = ['sbd', 'toan', 'ngu_van', 'ngoai_ngu', 'vat_li', 'hoa_hoc', 'sinh_hoc', 'lich_su', 'dia_li', 'gdcd', 'ma_ngoai_ngu', 'year']

df_20_21.sort_values(by='sbd', ascending=True).head(2)

df_22['ma_ngoai_ngu'] = 'none'
df_22['year'] = '2022'
df_23['year'] = '2023'
df_24['year'] = '2024'

df_24.sort_values(by='sbd', ascending=True).head(2)

"""## Concat Tables"""

df_data_all = ( pd.concat([df_24, df_23, df_22, df_20_21], ignore_index=True))

df_data_all.info()

"""## Create table of province"""

df_ = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/DiemDH/diem_thi_2020_2021.csv')

df_code = (df_[['code','province']].drop_duplicates())

df_code['code'] = df_code['code'].astype(str)

df_code['code'].unique()

df_code.sort_values(by='code', ascending=True).head(5)

# Map thêm tỉnh tp vào data
# tạo function code province
def province_code(x):
  if len(str(x)) == 7:
    return str(x)[0]
  return str(x)[:2]

df_data_all['province_code'] = df_data_all['sbd'].apply(province_code)

"""# 3. Analyze

## 3.1 Overview
"""

df_data_map = df_data_all

df_data_map['year'] = df_data_map['year'].astype(str)

df_data_map['year'].unique()

data = df_data_map

#Tính tổng số lượng thí sinh mỗi năm
students_per_year = data['year'].value_counts().sort_index()

#Tính tỷ lệ tăng trưởng
growth_rate = students_per_year.pct_change() * 100

#Tạo DataFrame để hiển thị kết quả
students_growth_df = pd.DataFrame({
    'Số lượng thí sinh': students_per_year,
    'Tỷ lệ tăng trưởng (%)': growth_rate
}).reset_index().rename(columns={'index': 'year'})

# Vẽ biểu đồ
fig, ax = plt.subplots(2,1, figsize=(6,6))

# Vẽ số lượng thí sinh
ax[0].bar(students_growth_df['year'], students_growth_df['Số lượng thí sinh'], color='blue')
ax[0].set_xlabel('year')
ax[0].set_ylabel('Số lượng thí sinh')
ax[0].set_title('Số lượng thí sinh qua các năm')
ax[0].grid(False)

# Vẽ tỷ lệ tăng trưởng
ax[1].bar(students_growth_df['year'], students_growth_df['Tỷ lệ tăng trưởng (%)'], color='orange')
ax[1].set_xlabel('year')
ax[1].set_ylabel('Tỷ lệ tăng trưởng (%')
ax[1].set_title('Số lượng tăng trưởng qua các năm')
ax[1].grid(False)

plt.tight_layout()
plt.show()

"""### Score distribution over years"""

from scipy.interpolate import make_interp_spline

data = df_data_map

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

x_year = [2020, 2021, 2022, 2023, 2024]

# Định nghĩa các môn học và tiêu đề
subjects = ['toan', 'ngu_van', 'ngoai_ngu', 'vat_li', 'hoa_hoc', 'sinh_hoc', 'lich_su', 'dia_li']
titles = ['Toán','Văn', 'Ngoại Ngữ', 'Lý', 'Hoá', 'Sinh', 'Sử', 'Địa']

# Tính toán điểm trung bình của các môn qua từng năm
mean_scores_by_year = data.groupby('year')[subjects].mean().reset_index()

# Vẽ biểu dồ đường cho từng môn với các đường kể mềm mại hơn
plt.figure(figsize=(8,4))

for subject in subjects:
  x = mean_scores_by_year['year']
  y = mean_scores_by_year[subject]

  # Tạo các điểm x mới để làm mịn đường
  x_new = np.linspace(x.min(), x.max(), 300)

  # Tạo spline để làm mịn đường
  spl = make_interp_spline(x, y, k=2)
  y_smooth = spl(x_new)

  plt.plot(x_new, y_smooth, label=subject, linewidth=2.5, alpha=1)

plt.title('Điểm trung binh các môn qua từng năm')
plt.xlabel("Năm")
plt.ylabel('Điểm trung bình')
plt.xticks(x_year)
plt.legend(loc='upper right', bbox_to_anchor=(1.3,1))
plt.grid(False)
plt.tight_layout()
plt.show()

data = df_data_map

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

# Tạo histogram cho điểm toán, văn, ngoại ngữ trong 4 năm gần đây
fig, axes = plt.subplots(5, 8, figsize=(20,8), sharex=True)

# Định nghĩa các môn học và tiêu đề
subjects = ['toan', 'ngu_van', 'ngoai_ngu', 'vat_li', 'hoa_hoc', 'sinh_hoc', 'lich_su', 'dia_li']
titles = ['Toán','Văn', 'Ngoại Ngữ', 'Lý', 'Hoá', 'Sinh', 'Sử', 'Địa']
colors = ['tomato', 'lightskyblue', 'orange', 'steelblue', 'cornflowerblue', 'olive', 'lavender', 'silver']

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và từng môn học
for i, year in enumerate(recent_years_sorted):
  for j, (subject, color) in enumerate(zip(subjects, colors)):
    sns.histplot(recent_years[recent_years['year'] == year][subject], bins=20, kde=False, ax=axes[i,j], edgecolor='black', color=color)
    axes[i, j].set_title(f'{titles[j]} {year}')
    axes[i, j].set_xlabel(f'Điểm {titles[j]}')
    axes[i, j].set_ylabel('#')

plt.tight_layout()
plt.show()

"""### Subject"""

data = df_data_map

data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year]['toan'], bins=20, kde=False, ax=axes[i], edgecolor='black', color='tomato')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel('Điểm Toán')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year]['toan'].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)


plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'ngu_van'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='blue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'ngoai_ngu'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='gray')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'vat_li'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'hoa_hoc'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'sinh_hoc'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'lich_su'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

data = df_data_map

sub = 'dia_li'
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 5 năm gần đây
recent_years = data[data['year'].isin(data['year'].unique()[-5:])]

socre = list(range(0,11,1))

# Tạo historgram cho điểm Toán trong 5 năm gần đây, sắp xếp theo dạng 1 cột với 5 hàng
fig, axes = plt.subplots(5, 1, figsize=(8, 8), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted = sorted(recent_years['year'].unique())

# Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
    sns.histplot(recent_years[recent_years['year'] == year][sub], bins=20, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
    axes[i].set_title(f'{year}')
    axes[i].set_xlabel(f'Điểm {sub}')
    axes[i].set_ylabel('Số lượng')

    # Tính toán các thông tin thống kê
    year_data = recent_years[recent_years['year'] == year][sub].dropna()
    mean = year_data.mean()
    median = year_data.median()
    std_dev = year_data.std()
    p70 = year_data.quantile(0.70)
    p80 = year_data.quantile(0.80)
    p90 = year_data.quantile(0.90)
    p93 = year_data.quantile(0.93)
    p95 = year_data.quantile(0.95)
    p97 = year_data.quantile(0.97)
    p99 = year_data.quantile(0.99)

    # Hiển thị thông tin thống kê trên biểu đồ
    textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
               f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
               f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
               f'P97: {p97:.2f}\nP99: {p99:.2f}')
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

"""### Compare with previous years"""

sampled_data = df_data_map.sample(frac = 0.3, random_state = 1)

sampled_data.info()

# Lọc dữ liệu từ các năm 2021 đến 2024
df_filtered = sampled_data[sampled_data['year'].isin([2021, 2022, 2023, 2024])]

# Các môn học cần phân tích
subjects = ['toan', 'ngu_van', 'ngoai_ngu', 'vat_li', 'hoa_hoc', 'sinh_hoc', 'lich_su', 'dia_li']
colors = ['steelblue', 'olive', 'orange', 'tomato']

# Vẽ historgram cho từng môn học
for subject in subjects:
  plt.figure(figsize=(10,3))
  for year, color in zip([2021, 2022, 2023, 2024], colors):
    data = df_filtered[df_filtered['year'] == year][subject].dropna()
    sns.kdeplot(data, label=f'Năm {year}', color=color, bw_adjust=2)
  plt.title(f'Phân bố điểm {subject} từ 2021 đến 2024')
  plt.xlabel('Điểm số')
  plt.ylabel('Mật độ')
  plt.legend(title='Năm')
  plt.grid(False)
  plt.show()

"""## 3.2 Group distribution"""

# Tạo các cộc tổng điểm cho từng tổ hợp môn
df_filtered['A'] = df_filtered['toan'] + df_filtered['vat_li'] + df_filtered['hoa_hoc']
df_filtered['A1'] = df_filtered['toan'] + df_filtered['vat_li'] + df_filtered['ngoai_ngu']
df_filtered['B'] = df_filtered['toan'] + df_filtered['sinh_hoc'] + df_filtered['hoa_hoc']
df_filtered['C'] = df_filtered['ngu_van'] + df_filtered['lich_su'] + df_filtered['dia_li']
df_filtered['D'] = df_filtered['toan'] + df_filtered['ngoai_ngu'] + df_filtered['ngu_van']

# Các tổ hợp môn cần phân tích
combinations = ['A', 'A1', 'B', 'C', 'D']

# Thiết lập các cài đặt cho biểu đồ
colors = ['steelblue', 'olive', 'orange', 'tomato']

# Vẽ historgram cho từng tổ hợp môn
for combo in combinations:
  plt.figure(figsize=(10,3))
  for year, color in zip([2021, 2022, 2023, 2024], colors):
    data = df_filtered[df_filtered['year'] == year][combo].dropna()
    sns.kdeplot(data, label=f'Năm {year}', color=color, bw_adjust=2)
  plt.title(f'Phân bố tổng điểm tổ hợp {combo} từ 2021 đến 2024')
  plt.xlabel('Tổng điểm')
  plt.ylabel('Mật độ')
  plt.legend(title='Năm')
  plt.grid(False)
  plt.show()

"""### Group A"""

df_data_map['A'] = df_data_map['toan'] + df_data_map['vat_li'] + df_data_map['hoa_hoc']
df_data_map['A1'] = df_data_map['toan'] + df_data_map['vat_li'] + df_data_map['ngoai_ngu']
df_data_map['B'] = df_data_map['toan'] + df_data_map['sinh_hoc'] + df_data_map['hoa_hoc']
df_data_map['C'] = df_data_map['ngu_van'] + df_data_map['lich_su'] + df_data_map['dia_li']
df_data_map['D'] = df_data_map['toan'] + df_data_map['ngoai_ngu'] + df_data_map['ngu_van']

data = df_data_map
sub = 'A'

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin([2022, 2023, 2024])]

socre = list(range(0, 30, 1))

#Tạo histogram cho điểm 'toan trong 5 năm gần dây, sắp xếp theo dạng 1 cột và 5 hàng
fig, axes = plt.subplots(3,1, figsize=(8,5), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted= sorted(recent_years['year'].unique())

#Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
  sns.histplot(recent_years[recent_years['year'] == year][sub], bins=30, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
  axes[i].set_title(f'{year}')
  axes[i].set_xlabel(f'Điểm {sub}')
  axes[i].set_ylabel('Số lượng')

  #Tính toán các thông tin thống kê
  year_data = recent_years[recent_years['year'] == year][sub].dropna()
  mean = year_data.mean()
  median = year_data.median()
  std_dev = year_data.std()
  p70 = year_data.quantile(0.70)
  p80 = year_data.quantile(0.80)
  p90 = year_data.quantile(0.90)
  p93 = year_data.quantile(0.93)
  p95 = year_data.quantile(0.95)
  p97 = year_data.quantile(0.97)
  p99 = year_data.quantile(0.99)

  # Hiển thị thông tin thống kê trên biểu đồ
  textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
              f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
              f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
              f'P97: {p97:.2f}\nP99: {p99:.2f}')
  props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
  axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

# Ước lượng

from scipy import stats

# Lựa chọn tổ hợp môn cần phân tích, ví dụ: A
combo = 'A'

# Chia khung điểm từ 20 đến 30, mỗi khoảng 0.5 điểm
bins = np.arange(21, 31, 0.5)

# Lọc dữ liệu cho các năm 2023 và 2024
df_2023 = df_data_map[df_data_map['year'] == 2023]
df_2024 = df_data_map[df_data_map['year'] == 2024]

# Tạo cột 'bins' cho dữ liệu
df_2023['bins'] = pd.cut(df_2023[combo], bins, right=False)
df_2024['bins'] = pd.cut(df_2024[combo], bins, right=False)

# Đếm số lượng học sinh trong mỗi khung điểm
count_2023 = df_2023['bins'].value_counts().sort_index()
count_2024 = df_2024['bins'].value_counts().sort_index()

# Tính toán sự chênh lệch trung bình số học sinh và khoảng tin cậy
mean_diff = count_2024.mean() - count_2023.mean()
std_diff = np.sqrt(count_2024.var() + count_2023.var())
confidence_interval = stats.norm.interval(0.95, loc=mean_diff, scale=std_diff / np.sqrt(len(count_2023)))

# Hiển thị kết quả
print('Sự chênh lệch trung bình số học sinh:', mean_diff)
print('Khoảng tin cậy 95% cho sự chênh lệch trung bình:', confidence_interval)

# Vẽ biểu đồ so sánh số lượng học sinh trong mỗi khung điểm cho hai năm
plt.figure(figsize=(10, 4))
plt.bar(count_2023.index.astype(str), count_2023.values, width=0.6, label='2023', align='center', alpha=0.5, color='lightskyblue')
plt.bar(count_2024.index.astype(str), count_2024.values, width=0.6, label='2024', align='edge', alpha=0.5, color='tomato')
plt.xlabel('Khung điểm')
plt.ylabel('Số lượng học sinh')
plt.title(f'So sánh số lượng học sinh trong các khung điểm tổ hợp {combo} giữa năm 2023 và 2024')
plt.xticks(rotation='vertical')
plt.legend()
plt.show()

"""### Group B"""

data = df_data_map
sub = 'B'

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin([2022, 2023, 2024])]

socre = list(range(0, 30, 1))

#Tạo histogram cho điểm 'toan trong 5 năm gần dây, sắp xếp theo dạng 1 cột và 5 hàng
fig, axes = plt.subplots(3,1, figsize=(8,5), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted= sorted(recent_years['year'].unique())

#Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
  sns.histplot(recent_years[recent_years['year'] == year][sub], bins=30, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
  axes[i].set_title(f'{year}')
  axes[i].set_xlabel(f'Điểm {sub}')
  axes[i].set_ylabel('Số lượng')

  #Tính toán các thông tin thống kê
  year_data = recent_years[recent_years['year'] == year][sub].dropna()
  mean = year_data.mean()
  median = year_data.median()
  std_dev = year_data.std()
  p70 = year_data.quantile(0.70)
  p80 = year_data.quantile(0.80)
  p90 = year_data.quantile(0.90)
  p93 = year_data.quantile(0.93)
  p95 = year_data.quantile(0.95)
  p97 = year_data.quantile(0.97)
  p99 = year_data.quantile(0.99)

  # Hiển thị thông tin thống kê trên biểu đồ
  textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
              f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
              f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
              f'P97: {p97:.2f}\nP99: {p99:.2f}')
  props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
  axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

# Ước lượng

from scipy import stats
combo = 'B'

# Chia khung điểm từ 20 đến 30, mỗi khoảng 0.5 điểm
bins = np.arange(21, 31, 0.5)

# Lọc dữ liệu cho các năm 2023 và 2024
df_2023 = df_data_map[df_data_map['year'] == 2023]
df_2024 = df_data_map[df_data_map['year'] == 2024]

# Tạo cột 'bins' cho dữ liệu
df_2023['bins'] = pd.cut(df_2023[combo], bins, right=False)
df_2024['bins'] = pd.cut(df_2024[combo], bins, right=False)

# Đếm số lượng học sinh trong mỗi khung điểm
count_2023 = df_2023['bins'].value_counts().sort_index()
count_2024 = df_2024['bins'].value_counts().sort_index()

# Tính toán sự chênh lệch trung bình số học sinh và khoảng tin cậy
mean_diff = count_2024.mean() - count_2023.mean()
std_diff = np.sqrt(count_2024.var() + count_2023.var())
confidence_interval = stats.norm.interval(0.95, loc=mean_diff, scale=std_diff / np.sqrt(len(count_2023)))

# Hiển thị kết quả
print('Sự chênh lệch trung bình số học sinh:', mean_diff)
print('Khoảng tin cậy 95% cho sự chênh lệch trung bình:', confidence_interval)

# Vẽ biểu đồ so sánh số lượng học sinh trong mỗi khung điểm cho hai năm
plt.figure(figsize=(10, 4))
plt.bar(count_2023.index.astype(str), count_2023.values, width=0.6, label='2023', align='center', alpha=0.5, color='lightskyblue')
plt.bar(count_2024.index.astype(str), count_2024.values, width=0.6, label='2024', align='edge', alpha=0.5, color='tomato')
plt.xlabel('Khung điểm')
plt.ylabel('Số lượng học sinh')
plt.title(f'So sánh số lượng học sinh trong các khung điểm tổ hợp {combo} giữa năm 2023 và 2024')
plt.xticks(rotation='vertical')
plt.legend()
plt.show()

"""### Group A1"""

data = df_data_map
sub = 'A1'

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin([2022, 2023, 2024])]

socre = list(range(0, 30, 1))

#Tạo histogram cho điểm 'toan trong 5 năm gần dây, sắp xếp theo dạng 1 cột và 5 hàng
fig, axes = plt.subplots(3,1, figsize=(8,5), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted= sorted(recent_years['year'].unique())

#Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
  sns.histplot(recent_years[recent_years['year'] == year][sub], bins=30, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
  axes[i].set_title(f'{year}')
  axes[i].set_xlabel(f'Điểm {sub}')
  axes[i].set_ylabel('Số lượng')

  #Tính toán các thông tin thống kê
  year_data = recent_years[recent_years['year'] == year][sub].dropna()
  mean = year_data.mean()
  median = year_data.median()
  std_dev = year_data.std()
  p70 = year_data.quantile(0.70)
  p80 = year_data.quantile(0.80)
  p90 = year_data.quantile(0.90)
  p93 = year_data.quantile(0.93)
  p95 = year_data.quantile(0.95)
  p97 = year_data.quantile(0.97)
  p99 = year_data.quantile(0.99)

  # Hiển thị thông tin thống kê trên biểu đồ
  textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
              f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
              f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
              f'P97: {p97:.2f}\nP99: {p99:.2f}')
  props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
  axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

# Ước lượng

from scipy import stats
combo = 'A1'

# Chia khung điểm từ 20 đến 30, mỗi khoảng 0.5 điểm
bins = np.arange(21, 31, 0.5)

# Lọc dữ liệu cho các năm 2023 và 2024
df_2023 = df_data_map[df_data_map['year'] == 2023]
df_2024 = df_data_map[df_data_map['year'] == 2024]

# Tạo cột 'bins' cho dữ liệu
df_2023['bins'] = pd.cut(df_2023[combo], bins, right=False)
df_2024['bins'] = pd.cut(df_2024[combo], bins, right=False)

# Đếm số lượng học sinh trong mỗi khung điểm
count_2023 = df_2023['bins'].value_counts().sort_index()
count_2024 = df_2024['bins'].value_counts().sort_index()

# Tính toán sự chênh lệch trung bình số học sinh và khoảng tin cậy
mean_diff = count_2024.mean() - count_2023.mean()
std_diff = np.sqrt(count_2024.var() + count_2023.var())
confidence_interval = stats.norm.interval(0.95, loc=mean_diff, scale=std_diff / np.sqrt(len(count_2023)))

# Hiển thị kết quả
print('Sự chênh lệch trung bình số học sinh:', mean_diff)
print('Khoảng tin cậy 95% cho sự chênh lệch trung bình:', confidence_interval)

# Vẽ biểu đồ so sánh số lượng học sinh trong mỗi khung điểm cho hai năm
plt.figure(figsize=(10, 4))
plt.bar(count_2023.index.astype(str), count_2023.values, width=0.6, label='2023', align='center', alpha=0.5, color='lightskyblue')
plt.bar(count_2024.index.astype(str), count_2024.values, width=0.6, label='2024', align='edge', alpha=0.5, color='tomato')
plt.xlabel('Khung điểm')
plt.ylabel('Số lượng học sinh')
plt.title(f'So sánh số lượng học sinh trong các khung điểm tổ hợp {combo} giữa năm 2023 và 2024')
plt.xticks(rotation='vertical')
plt.legend()
plt.show()

"""### Group C"""

data = df_data_map
sub = 'C'

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin([2022, 2023, 2024])]

socre = list(range(0, 30, 1))

#Tạo histogram cho điểm 'toan trong 5 năm gần dây, sắp xếp theo dạng 1 cột và 5 hàng
fig, axes = plt.subplots(3,1, figsize=(8,5), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted= sorted(recent_years['year'].unique())

#Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
  sns.histplot(recent_years[recent_years['year'] == year][sub], bins=30, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
  axes[i].set_title(f'{year}')
  axes[i].set_xlabel(f'Điểm {sub}')
  axes[i].set_ylabel('Số lượng')

  #Tính toán các thông tin thống kê
  year_data = recent_years[recent_years['year'] == year][sub].dropna()
  mean = year_data.mean()
  median = year_data.median()
  std_dev = year_data.std()
  p70 = year_data.quantile(0.70)
  p80 = year_data.quantile(0.80)
  p90 = year_data.quantile(0.90)
  p93 = year_data.quantile(0.93)
  p95 = year_data.quantile(0.95)
  p97 = year_data.quantile(0.97)
  p99 = year_data.quantile(0.99)

  # Hiển thị thông tin thống kê trên biểu đồ
  textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
              f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
              f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
              f'P97: {p97:.2f}\nP99: {p99:.2f}')
  props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
  axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

# Ước lượng

from scipy import stats
combo = 'C'

# Chia khung điểm từ 20 đến 30, mỗi khoảng 0.5 điểm
bins = np.arange(21, 31, 0.5)

# Lọc dữ liệu cho các năm 2023 và 2024
df_2023 = df_data_map[df_data_map['year'] == 2023]
df_2024 = df_data_map[df_data_map['year'] == 2024]

# Tạo cột 'bins' cho dữ liệu
df_2023['bins'] = pd.cut(df_2023[combo], bins, right=False)
df_2024['bins'] = pd.cut(df_2024[combo], bins, right=False)

# Đếm số lượng học sinh trong mỗi khung điểm
count_2023 = df_2023['bins'].value_counts().sort_index()
count_2024 = df_2024['bins'].value_counts().sort_index()

# Tính toán sự chênh lệch trung bình số học sinh và khoảng tin cậy
mean_diff = count_2024.mean() - count_2023.mean()
std_diff = np.sqrt(count_2024.var() + count_2023.var())
confidence_interval = stats.norm.interval(0.95, loc=mean_diff, scale=std_diff / np.sqrt(len(count_2023)))

# Hiển thị kết quả
print('Sự chênh lệch trung bình số học sinh:', mean_diff)
print('Khoảng tin cậy 95% cho sự chênh lệch trung bình:', confidence_interval)

# Vẽ biểu đồ so sánh số lượng học sinh trong mỗi khung điểm cho hai năm
plt.figure(figsize=(10, 4))
plt.bar(count_2023.index.astype(str), count_2023.values, width=0.6, label='2023', align='center', alpha=0.5, color='lightskyblue')
plt.bar(count_2024.index.astype(str), count_2024.values, width=0.6, label='2024', align='edge', alpha=0.5, color='tomato')
plt.xlabel('Khung điểm')
plt.ylabel('Số lượng học sinh')
plt.title(f'So sánh số lượng học sinh trong các khung điểm tổ hợp {combo} giữa năm 2023 và 2024')
plt.xticks(rotation='vertical')
plt.legend()
plt.show()

"""### Group D"""

data = df_data_map
sub = 'D'

# Chuyển đổi cột 'year' sang dạng số
data['year'] = pd.to_numeric(data['year'])

# Lọc dữ liệu cho 4 năm gần đây
recent_years = data[data['year'].isin([2022, 2023, 2024])]

socre = list(range(0, 30, 1))

#Tạo histogram cho điểm 'toan trong 5 năm gần dây, sắp xếp theo dạng 1 cột và 5 hàng
fig, axes = plt.subplots(3,1, figsize=(8,5), sharex=True)

# Các năm gần đây, được sắp xếp theo thứ tự tăng dần
recent_years_sorted= sorted(recent_years['year'].unique())

#Vẽ histogram cho từng năm và hiển thị các thông tin thống kê
for i, year in enumerate(recent_years_sorted):
  sns.histplot(recent_years[recent_years['year'] == year][sub], bins=30, kde=False, ax=axes[i], edgecolor='black', color='cornflowerblue')
  axes[i].set_title(f'{year}')
  axes[i].set_xlabel(f'Điểm {sub}')
  axes[i].set_ylabel('Số lượng')

  #Tính toán các thông tin thống kê
  year_data = recent_years[recent_years['year'] == year][sub].dropna()
  mean = year_data.mean()
  median = year_data.median()
  std_dev = year_data.std()
  p70 = year_data.quantile(0.70)
  p80 = year_data.quantile(0.80)
  p90 = year_data.quantile(0.90)
  p93 = year_data.quantile(0.93)
  p95 = year_data.quantile(0.95)
  p97 = year_data.quantile(0.97)
  p99 = year_data.quantile(0.99)

  # Hiển thị thông tin thống kê trên biểu đồ
  textstr = (f'Mean: {mean:.2f}\nMedian: {median:.2f}\nSTD: {std_dev:.2f}\n'
              f'P70: {p70:.2f}\nP80: {p80:.2f}\n'
              f'P90: {p90:.2f}\nP93: {p93:.2f}\nP95: {p95:.2f}\n'
              f'P97: {p97:.2f}\nP99: {p99:.2f}')
  props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
  axes[i].text(1.02, 0.5, textstr, transform=axes[i].transAxes, fontsize=8, verticalalignment='center', horizontalalignment='left', bbox=props)

plt.xticks(socre)
plt.tight_layout()
plt.show()

# Ước lượng

from scipy import stats
combo = 'D'

# Chia khung điểm từ 20 đến 30, mỗi khoảng 0.5 điểm
bins = np.arange(21, 31, 0.5)

# Lọc dữ liệu cho các năm 2023 và 2024
df_2023 = df_data_map[df_data_map['year'] == 2023]
df_2024 = df_data_map[df_data_map['year'] == 2024]

# Tạo cột 'bins' cho dữ liệu
df_2023['bins'] = pd.cut(df_2023[combo], bins, right=False)
df_2024['bins'] = pd.cut(df_2024[combo], bins, right=False)

# Đếm số lượng học sinh trong mỗi khung điểm
count_2023 = df_2023['bins'].value_counts().sort_index()
count_2024 = df_2024['bins'].value_counts().sort_index()

# Tính toán sự chênh lệch trung bình số học sinh và khoảng tin cậy
mean_diff = count_2024.mean() - count_2023.mean()
std_diff = np.sqrt(count_2024.var() + count_2023.var())
confidence_interval = stats.norm.interval(0.95, loc=mean_diff, scale=std_diff / np.sqrt(len(count_2023)))

# Hiển thị kết quả
print('Sự chênh lệch trung bình số học sinh:', mean_diff)
print('Khoảng tin cậy 95% cho sự chênh lệch trung bình:', confidence_interval)

# Vẽ biểu đồ so sánh số lượng học sinh trong mỗi khung điểm cho hai năm
plt.figure(figsize=(10, 4))
plt.bar(count_2023.index.astype(str), count_2023.values, width=0.6, label='2023', align='center', alpha=0.5, color='lightskyblue')
plt.bar(count_2024.index.astype(str), count_2024.values, width=0.6, label='2024', align='edge', alpha=0.5, color='tomato')
plt.xlabel('Khung điểm')
plt.ylabel('Số lượng học sinh')
plt.title(f'So sánh số lượng học sinh trong các khung điểm tổ hợp {combo} giữa năm 2023 và 2024')
plt.xticks(rotation='vertical')
plt.legend()
plt.show()

# Percentile
# Các tổ hợp môn cần phân tích
combinations = ['A', 'A1', 'B', 'C', 'D']

# Các percentile cần tính toán
percentiles = list(range(70, 101, 2))

# Tạo DataFrame để lưu kết quả
percentile_df = pd.DataFrame(index=percentiles)

# Tính toán các chỉ số percentile
for combo in combinations:
  for year in [2022, 2023, 2024]:
    data = df_data_map[df_data_map['year'] == year][combo].dropna()
    percentile_values = np.percentile(data, percentiles)
    percentile_df[f'{combo}_{year}'] = percentile_values

# Hiển thị kết quả dưới dạng bảng
percentile_df = percentile_df.T
percentile_df.index.name = 'Combination_Year'

percentile_df

"""## 3.3 Correlation"""

# Lọc dữ liệu cho năm 2024
df_2024 = sampled_data[sampled_data['year'] == 2024]

# Chọn các cột điểm số của các môn học
subjects_scores = df_2024[['toan','ngu_van', 'ngoai_ngu', 'vat_li', 'hoa_hoc', 'sinh_hoc', 'lich_su', 'dia_li','gdcd']]

# Tính toán ma trận tương quan
correlation_matrix = subjects_scores.corr()

# Vẽ biểu dồ heatmap của ma trận tương quan
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='YlGn', fmt='.2f')
plt.title('Heatmap của ma trận tương quan điểm số các môn thi năm 2024')
plt.show()

sampled_data['A'] = sampled_data['toan'] + sampled_data['vat_li'] + sampled_data['hoa_hoc']
sampled_data['A1'] = sampled_data['toan'] + sampled_data['vat_li'] + sampled_data['ngoai_ngu']
sampled_data['B'] = sampled_data['toan'] + sampled_data['sinh_hoc'] + sampled_data['hoa_hoc']
sampled_data['C'] = sampled_data['ngu_van'] + sampled_data['lich_su'] + sampled_data['dia_li']
sampled_data['D'] = sampled_data['toan'] + sampled_data['ngoai_ngu'] + sampled_data['ngu_van']

# Lọc dữ liệu cho năm 2024
df_2024 = sampled_data[sampled_data['year'] == 2024]

# Chọn các cột điểm số của các môn học
group_scores = df_2024[['A', 'A1', 'B', 'C', 'D']]

# Tính toán ma trận tương quan
correlation_matrix = group_scores.corr()

# Vẽ biểu dồ heatmap của ma trận tương quan
plt.figure(figsize=(10, 3))
sns.heatmap(correlation_matrix, annot=True, cmap='YlGn', fmt='.2f')
plt.title('Heatmap của ma trận tương quan điểm số các môn thi năm 2024')
plt.show()

# Danh sách các năm cần phân tích
years = [2021, 2022, 2023, 2024]

# Tạo một figure để chứa các heatmap
fig, axes = plt.subplots(2, 2, figsize=(10,5))
axes = axes.flatten()

# Vẽ heatmap cho từng năm
for i, year in enumerate(years):
  df_year = sampled_data[sampled_data['year'] == year]
  group_scores = df_year[['A', 'A1', 'B', 'C', 'D']]
  correlation_matrix = group_scores.corr()
  sns.heatmap(correlation_matrix, annot=True, cmap='PuBu', fmt='.2f', ax=axes[i])
  axes[i].set_title(f'Correlation matrix by {year}')

# Điều chỉnh khoảng cách giữa cac subplots
plt.subplots_adjust(wspace=0.5, hspace=0.6)
plt.tight_layout()
plt.show()

"""### Location"""

data_province = {
'province': ['Hà Nội', 'Hải Phòng', 'Quảng Ninh', 'Vĩnh Phúc', 'Bắc Ninh', 'Hải Dương', 'Hưng Yên', 'Hà Nam', 'Thái Bình',
             'Nam Định', 'Ninh Bình', 'Hà Giang', 'Cao Bằng', 'Bắc Kạn', 'Tuyên Quang', 'Lào Cai', 'Điện Biên', 'Lai Châu',
             'Sơn La', 'Yên Bái', 'Hoà Bình', 'Thái Nguyên', 'Lạng Sơn', 'Bắc Giang', 'Phú Thọ', 'Quảng Bình', 'Quảng Trị',
             'Thừa Thiên Huế', 'Đà Nẵng', 'Quảng Nam', 'Quảng Ngãi', 'Bình Định', 'Phú Yên', 'Khánh Hòa', 'Ninh Thuận', 'Bình Thuận',
             'Thanh Hóa', 'Nghệ An', 'Hà Tĩnh', 'Gia Lai', 'Kon Tum', 'Đắk Lắk', 'Đắk Nông', 'Lâm Đồng', 'Bình Phước', 'Tây Ninh',
             'Bình Dương', 'Đồng Nai', 'Bà Rịa - Vũng Tàu', 'TP. Hồ Chí Minh', 'Long An', 'Tiền Giang', 'Bến Tre', 'Trà Vinh',
             'Vĩnh Long', 'Đồng Tháp', 'An Giang', 'Kiên Giang', 'Cần Thơ', 'Hậu Giang', 'Sóc Trăng', 'Bạc Liêu', 'Cà Mau'],
'region': ['Đồng bằng sông Hồng', 'Đồng bằng sông Hồng','Đồng bằng sông Hồng','Đồng bằng sông Hồng','Đồng bằng sông Hồng','Đồng bằng sông Hồng',
           'Đồng bằng sông Hồng', 'Đồng bằng sông Hồng','Đồng bằng sông Hồng','Đồng bằng sông Hồng','Đồng bằng sông Hồng', 'Trung du và miền núi phía Bắc',
           'Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc',
           'Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc',
           'Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc','Trung du và miền núi phía Bắc',
           'Bắc Trung Bộ', 'Duyên hải Nam Trung Bộ','Duyên hải Nam Trung Bộ','Duyên hải Nam Trung Bộ',
           'Duyên hải Nam Trung Bộ','Duyên hải Nam Trung Bộ','Duyên hải Nam Trung Bộ','Duyên hải Nam Trung Bộ', 'Duyên hải Nam Trung Bộ', 'Bắc Trung Bộ','Bắc Trung Bộ','Bắc Trung Bộ', 'Bắc Trung Bộ','Bắc Trung Bộ','Tây Nguyên','Tây Nguyên','Tây Nguyên','Tây Nguyên',
           'Tây Nguyên', 'Đông Nam Bộ','Đông Nam Bộ','Đông Nam Bộ', 'Đông Nam Bộ','Đông Nam Bộ','Đông Nam Bộ', 'Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long',
           'Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long',
           'Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long','Đồng bằng sông Cửu Long']}

# Tạo DataFrame
df_eco_region = pd.DataFrame(data_province)

#df_data_map = df_data_all

df_code.rename(columns={'code': 'province_code'}, inplace=True)
df_data_map = pd.merge(df_data_map, df_code, on='province_code', how='left')

df_data_map_region = (
    pd.merge(df_data_map, df_eco_region, on='province', how= 'left'))

# Thống kê theo tỉnh
df_year_group_region = (
    df_data_map_region
    .pivot_table( index = 'region', columns = 'year', aggfunc='count', values='sbd')
    .reset_index()
)

from scipy.interpolate import make_interp_spline

# Tính toán số lượng thí sinh mỗi năm theo region
students_per_year_region = df_data_map_region.groupby(['year', 'region']).size().unstack()

# Tính toán tốc độ tăng trưởng
growth_rate_region = students_per_year_region.pct_change() * 100

# Xử lý các giá trị inf và nan
growth_rate_region.replace([np.inf, -np.inf], np.nan, inplace= True)
growth_rate_region.fillna(0, inplace=True)

# Vẽ biểu dồ dượng cho tốc độ tăng trưởng theo từng region
plt.figure(figsize=(12,4))

for region in growth_rate_region.columns:
  x = growth_rate_region.index
  y = growth_rate_region[region]

  # Tạo các điểm x mới để làm mịn đường
  x_new = np.linspace(x.min(), x.max(), 300)

  # Tạo spline để làm mịn đường
  spl = make_interp_spline(x,y, k=3)
  y_smooth = spl(x_new)

  plt.plot(x_new, y_smooth, label=region, linewidth=2, alpha=0.7)

plt.title('Tốc độ tăng trưởng số lượng thí sinh qua các năm theo từng region')
plt.xlabel('Năm')
plt.ylabel('Tốc độ tăng trưởng (%)')
plt.legend(loc='upper left', bbox_to_anchor=(1.05, 1))
plt.grid(False)
#plt.xticks(x_year)
plt.tight_layout()
plt.show()

# Tính toán số lượng thí sinh mỗi năm theo region
students_per_year_region = df_data_map_region.groupby(['year', 'region']). size().unstack()

# Vẽ biểu đồ cột so sánh số lượng thí sinh theo region qua từng năm
students_per_year_region.plot(kind='bar', figsize=(12,4), alpha = 0.7)
plt.title('Số lượng thí sinh theo region qua từng năm')
plt.xlabel('Năm')
plt.ylabel('Số lượng thí sinh')
plt.legend(title='Region', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

"""### Duyên Hải NTB"""

# Check ĐNB
# Thống kê theo tỉnh

data_kv = df_data_map_region
data_kv['year'] = data_kv['year'].astype(str)

df_year_group_kv = (
    data_kv[data_kv['region'] == 'Duyên hải Nam Trung Bộ']
    .pivot_table( index='province', columns ='year', aggfunc='count', values='sbd')
    .reset_index()
)

#So sánh tỉ lệ tăng giảm số lượng của 2 năm:

df_year_group_kv['diff_21'] = (
    (df_year_group_kv['2021'] - df_year_group_kv['2020']) / df_year_group_kv['2020']
)

df_year_group_kv['diff_22'] = (
    (df_year_group_kv['2022'] - df_year_group_kv['2021']) / df_year_group_kv['2021']
)

df_year_group_kv['diff_23'] = (
    (df_year_group_kv['2023'] - df_year_group_kv['2022']) / df_year_group_kv['2022']
)

df_year_group_kv['diff_24'] = (
    (df_year_group_kv['2024'] - df_year_group_kv['2023']) / df_year_group_kv['2023']
)

# Tô màu (heat map) cho table:
(
    df_year_group_kv
    .sort_values(by='2021', ascending=False).style.format({'diff_21':'{:.0%}', 'diff_22':'{:.0%}','diff_23':'{:.0%}','diff_24':'{:.0%}'})
    .background_gradient(subset = ['diff_21', 'diff_22', 'diff_23', 'diff_24'], cmap = 'PuBu')
)

"""### Đồng băng Sông Hồng"""

# Thống kê theo tỉnh

data_kv = df_data_map_region
data_kv['year'] = data_kv['year'].astype(str)

df_year_group_kv = (
    data_kv[data_kv['region'] == 'Đồng bằng sông Hồng']
    .pivot_table( index='province', columns ='year', aggfunc='count', values='sbd')
    .reset_index()
)

#So sánh tỉ lệ tăng giảm số lượng của 2 năm:

df_year_group_kv['diff_21'] = (
    (df_year_group_kv['2021'] - df_year_group_kv['2020']) / df_year_group_kv['2020']
)

df_year_group_kv['diff_22'] = (
    (df_year_group_kv['2022'] - df_year_group_kv['2021']) / df_year_group_kv['2021']
)

df_year_group_kv['diff_23'] = (
    (df_year_group_kv['2023'] - df_year_group_kv['2022']) / df_year_group_kv['2022']
)

df_year_group_kv['diff_24'] = (
    (df_year_group_kv['2024'] - df_year_group_kv['2023']) / df_year_group_kv['2023']
)

# Tô màu (heat map) cho table:
(
    df_year_group_kv
    .sort_values(by='2021', ascending=False).style.format({'diff_21':'{:.0%}', 'diff_22':'{:.0%}','diff_23':'{:.0%}','diff_24':'{:.0%}'})
    .background_gradient(subset = ['diff_21', 'diff_22', 'diff_23', 'diff_24'], cmap = 'PuBu')
)

"""### Đồng bằng sông Cửu Long"""

# Thống kê theo tỉnh

data_kv = df_data_map_region
data_kv['year'] = data_kv['year'].astype(str)

df_year_group_kv = (
    data_kv[data_kv['region'] == 'Đồng bằng sông Cửu Long']
    .pivot_table( index='province', columns ='year', aggfunc='count', values='sbd')
    .reset_index()
)

#So sánh tỉ lệ tăng giảm số lượng của 2 năm:

df_year_group_kv['diff_21'] = (
    (df_year_group_kv['2021'] - df_year_group_kv['2020']) / df_year_group_kv['2020']
)

df_year_group_kv['diff_22'] = (
    (df_year_group_kv['2022'] - df_year_group_kv['2021']) / df_year_group_kv['2021']
)

df_year_group_kv['diff_23'] = (
    (df_year_group_kv['2023'] - df_year_group_kv['2022']) / df_year_group_kv['2022']
)

df_year_group_kv['diff_24'] = (
    (df_year_group_kv['2024'] - df_year_group_kv['2023']) / df_year_group_kv['2023']
)

# Tô màu (heat map) cho table:
(
    df_year_group_kv
    .sort_values(by='2021', ascending=False).style.format({'diff_21':'{:.0%}', 'diff_22':'{:.0%}','diff_23':'{:.0%}','diff_24':'{:.0%}'})
    .background_gradient(subset = ['diff_21', 'diff_22', 'diff_23', 'diff_24'], cmap = 'PuBu')
)

"""## Map"""

import geopandas as gdp
df_map = gdp.read_file('/content/drive/MyDrive/Colab Notebooks/diaphantinh.geojson')

df_map['province'] = df_map['ten_tinh']

df_data_map_region.info()

sub = 'toan'

# Lọc dữ liệu cho năm 2024
df= df_data_map_region[df_data_map_region['year'] == '2024']

# Tính toán trung vị điểm Toán của từng tỉnh
median_scores = df.groupby('province')[sub].median().reset_index()
median_scores.columns = ['province',f'median_{sub}']

# Tính toán số lượng thí sinh có điểm top 5%
high_scores_count = df[df[sub] > 8.6].groupby('province').size().reset_index(name='high_score_count')

# Tính toán độ lệch chuẩn điểm Toán từng tỉnh
std_dev_scores = df.groupby('province')[sub].std().reset_index()
std_dev_scores.columns = ['province',f'std_{sub}']

# Tính toán độ lệch chuẩn điểm Toán của từng tỉnh
gdf = df_map[['province', 'geometry']]

# Kết hợp dữ liệu trung vị điểm Toán, số lượng thí sinh có điểm Toán > 8.6 và độ lệch chuẩn
gdf = gdf.merge(median_scores, how='left', on='province')
gdf = gdf.merge(high_scores_count, how='left', on='province')
gdf = gdf.merge(std_dev_scores, how='left', on='province')

# Lấy top 10 tỉnh có trung vị điểm Toán cao nhất
top_10_provinces_median = gdf.nlargest(10, f'median_{sub}')
top_10_provinces_high_scores = gdf.nlargest(10, 'high_score_count')
top_10_provinces_std_dev = gdf.nlargest(10, f'std_{sub}')

# Tạo figure với 3 subplot
fig, axes = plt.subplots(1, 3, figsize=(28, 17))
axes[0].axis('off')
axes[1].axis('off')
axes[2].axis('off')

# Vẽ bản đổ trung vị điểm Toán
gdf.plot(column=f'median_{sub}', ax=axes[0], legend=True, cmap='OrRd', legend_kwds={'label': 'Trung vị điểm', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[0].set_title(f'Trung vị điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh trung vị điểm Toán cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[0].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ số lượng thí sinh có diểm Toán > 8.6
gdf.plot(column='high_score_count', ax=axes[1], legend=True, cmap='Blues', legend_kwds={'label': "Số lượng thí sinh lọt top 5%", 'orientation':"horizontal"}, linewidth=0.8, edgecolor='black')
axes[1].set_title(f'Số lượng thí sinh có điểm {sub} lọt top 5%')

# Vẽ nhãn cho top 10 tinh có số lượng thí sinh có điểm Toán > 8.6 cao nhất
for idx, row in top_10_provinces_high_scores.iterrows():
  axes[1].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                    horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ độ lệch chuẩn điểm toán
gdf.plot(column=f'std_{sub}', ax=axes[2], legend=True, cmap='Greens', legend_kwds={'label': 'Độ lệch chuẩn', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[2].set_title(f'Độ lệch chuẩn điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh có độ lệch chuẩn điểm Toán cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[2].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

plt.tight_layout()
plt.show()

sub = 'ngoai_ngu'

# Lọc dữ liệu cho năm 2024
df= df_data_map_region[df_data_map_region['year'] == '2024']

# Tính Ngoại ngữ trung vị điểm Ngoại ngữ của từng tỉnh
median_scores = df.groupby('province')[sub].median().reset_index()
median_scores.columns = ['province',f'median_{sub}']

# Tính Ngoại ngữ số lượng thí sinh có điểm top 5%
high_scores_count = df[df[sub] > 8.8].groupby('province').size().reset_index(name='high_score_count')

# Tính Ngoại ngữ độ lệch chuẩn điểm Ngoại ngữ từng tỉnh
std_dev_scores = df.groupby('province')[sub].std().reset_index()
std_dev_scores.columns = ['province',f'std_{sub}']

# Tính Ngoại ngữ độ lệch chuẩn điểm Ngoại ngữ của từng tỉnh
gdf = df_map[['province', 'geometry']]

# Kết hợp dữ liệu trung vị điểm Ngoại ngữ, số lượng thí sinh có điểm Ngoại ngữ > 8.8 và độ lệch chuẩn
gdf = gdf.merge(median_scores, how='left', on='province')
gdf = gdf.merge(high_scores_count, how='left', on='province')
gdf = gdf.merge(std_dev_scores, how='left', on='province')

# Lấy top 10 tỉnh có trung vị điểm Ngoại ngữ cao nhất
top_10_provinces_median = gdf.nlargest(10, f'median_{sub}')
top_10_provinces_high_scores = gdf.nlargest(10, 'high_score_count')
top_10_provinces_std_dev = gdf.nlargest(10, f'std_{sub}')

# Tạo figure với 3 subplot
fig, axes = plt.subplots(1, 3, figsize=(28, 17))
axes[0].axis('off')
axes[1].axis('off')
axes[2].axis('off')

# Vẽ bản đổ trung vị điểm Ngoại ngữ
gdf.plot(column=f'median_{sub}', ax=axes[0], legend=True, cmap='OrRd', legend_kwds={'label': 'Trung vị điểm', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[0].set_title(f'Trung vị điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh trung vị điểm Ngoại ngữ cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[0].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ số lượng thí sinh có diểm Ngoại ngữ > 8.8
gdf.plot(column='high_score_count', ax=axes[1], legend=True, cmap='Blues', legend_kwds={'label': "Số lượng thí sinh lọt top 5%", 'orientation':"horizontal"}, linewidth=0.8, edgecolor='black')
axes[1].set_title(f'Số lượng thí sinh có điểm {sub} lọt top 5%')

# Vẽ nhãn cho top 10 tinh có số lượng thí sinh có điểm Ngoại ngữ > 8.8 cao nhất
for idx, row in top_10_provinces_high_scores.iterrows():
  axes[1].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                    horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ độ lệch chuẩn điểm Ngoại ngữ
gdf.plot(column=f'std_{sub}', ax=axes[2], legend=True, cmap='Greens', legend_kwds={'label': 'Độ lệch chuẩn', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[2].set_title(f'Độ lệch chuẩn điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh có độ lệch chuẩn điểm Ngoại ngữ cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[2].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

plt.tight_layout()
plt.show()

sub = 'ngu_van'

# Lọc dữ liệu cho năm 2024
df= df_data_map_region[df_data_map_region['year'] == '2024']

# Tính Văn trung vị điểm Văn của từng tỉnh
median_scores = df.groupby('province')[sub].median().reset_index()
median_scores.columns = ['province',f'median_{sub}']

# Tính Văn số lượng thí sinh có điểm top 5%
high_scores_count = df[df[sub] > 9].groupby('province').size().reset_index(name='high_score_count')

# Tính Văn độ lệch chuẩn điểm Văn từng tỉnh
std_dev_scores = df.groupby('province')[sub].std().reset_index()
std_dev_scores.columns = ['province',f'std_{sub}']

# Tính Văn độ lệch chuẩn điểm Văn của từng tỉnh
gdf = df_map[['province', 'geometry']]

# Kết hợp dữ liệu trung vị điểm Văn, số lượng thí sinh có điểm Văn > 9 và độ lệch chuẩn
gdf = gdf.merge(median_scores, how='left', on='province')
gdf = gdf.merge(high_scores_count, how='left', on='province')
gdf = gdf.merge(std_dev_scores, how='left', on='province')

# Lấy top 10 tỉnh có trung vị điểm Văn cao nhất
top_10_provinces_median = gdf.nlargest(10, f'median_{sub}')
top_10_provinces_high_scores = gdf.nlargest(10, 'high_score_count')
top_10_provinces_std_dev = gdf.nlargest(10, f'std_{sub}')

# Tạo figure với 3 subplot
fig, axes = plt.subplots(1, 3, figsize=(28, 17))
axes[0].axis('off')
axes[1].axis('off')
axes[2].axis('off')

# Vẽ bản đổ trung vị điểm Văn
gdf.plot(column=f'median_{sub}', ax=axes[0], legend=True, cmap='OrRd', legend_kwds={'label': 'Trung vị điểm', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[0].set_title(f'Trung vị điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh trung vị điểm Văn cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[0].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ số lượng thí sinh có diểm Văn > 9
gdf.plot(column='high_score_count', ax=axes[1], legend=True, cmap='Blues', legend_kwds={'label': "Số lượng thí sinh lọt top 5%", 'orientation':"horizontal"}, linewidth=0.8, edgecolor='black')
axes[1].set_title(f'Số lượng thí sinh có điểm {sub} lọt top 5%')

# Vẽ nhãn cho top 10 tinh có số lượng thí sinh có điểm Văn > 9 cao nhất
for idx, row in top_10_provinces_high_scores.iterrows():
  axes[1].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                    horizontalalignment='center', fontsize=8, color='black', weight='bold')

# Vẽ bản đồ độ lệch chuẩn điểm văn
gdf.plot(column=f'std_{sub}', ax=axes[2], legend=True, cmap='Greens', legend_kwds={'label': 'Độ lệch chuẩn', 'orientation': 'horizontal'}, linewidth=0.8, edgecolor='black')
axes[2].set_title(f'Độ lệch chuẩn điểm {sub} của từng tỉnh')

# Vẽ nhãn cho top 10 tỉnh có độ lệch chuẩn điểm Văn cao nhất
for idx, row in top_10_provinces_median.iterrows():
  axes[2].annotate(text=row['province'], xy=(row['geometry'].centroid.x, row['geometry'].centroid.y),
                   horizontalalignment='center', fontsize=8, color='black', weight='bold')

plt.tight_layout()
plt.show()